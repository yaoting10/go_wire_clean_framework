// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/gophero/goal/aws/s3"
	"github.com/gophero/goal/mailx"
	"github.com/gophero/goal/uuid"
	"goboot/cmd/api/conf"
	"goboot/cmd/api/server"
	"goboot/internal/config"
	"goboot/internal/handler"
	"goboot/internal/repository"
	"goboot/internal/repository/repo"
	"goboot/internal/service"
)

// Injectors from wire.go:

func newApp() (*server.App, func(), error) {
	apiConf := ConfProvider()
	mailxConf := MailConfProvider(apiConf)
	logger := LoggerProvider(apiConf)
	client := repo.NewRedis(apiConf)
	handlerHandler := handler.NewHandler(logger)
	wdb := repo.NewWDB(apiConf)
	rdb := repo.NewRDB(apiConf)
	repoRepository := repo.NewRepository(wdb, rdb, logger)
	sid := uuid.NewSid()
	serviceService := service.NewService(repoRepository, logger, sid, apiConf)
	demoApi := handler.NewDemoApi(handlerHandler, serviceService)
	userRepository := repository.NewUserRepository(repoRepository)
	s3Conf := conf.NewS3Conf(apiConf)
	s3Client := s3.NewS3(s3Conf)
	sysDeviceRepository := repository.NewSysDeviceRepository(repoRepository)
	sysDeviceService := service.NewSysDeviceService(serviceService, sysDeviceRepository)
	sysSettingRepository := repository.NewSysSettingRepository(repoRepository)
	sysSettingService := service.NewSysSettingService(serviceService, sysSettingRepository)
	imageService := service.NewImageService(serviceService, s3Client)
	userService := service.NewUserService(serviceService, userRepository, apiConf, s3Client, client, sysDeviceService, sysSettingService, imageService)
	sysVersionRepository := repository.NewSysVersionRepository(repoRepository)
	appVersionService := service.NewAppVersionService(serviceService, sysVersionRepository)
	userHandler := handler.NewUserHandler(handlerHandler, apiConf, userService, appVersionService)
	sender := mailx.NewSender(logger, mailxConf)
	loginHandler := handler.NewLoginHandler(handlerHandler, client, sender, userService, sysSettingService, appVersionService, sysDeviceService)
	sysSettingHandler := handler.NewSysSettingHandler(handlerHandler, sysSettingService)
	app := server.NewServerHTTP(mailxConf, logger, apiConf, client, demoApi, userHandler, loginHandler, sysSettingHandler)
	return app, func() {
	}, nil
}

// wire.go:

// 全局唯一id
var sidSet = wire.NewSet(uuid.NewSid)

var confSet = wire.NewSet(ConfProvider, LoggerProvider, MailConfProvider, wire.Bind(new(config.Conf), new(*conf.ApiConf)))

// http服务
var serverSet = wire.NewSet(server.NewServerHTTP)

// sys相关集合
var sysHandlerSet = wire.NewSet(handler.NewSysSettingHandler)

var sysSrvSet = wire.NewSet(service.NewAppVersionService, service.NewSysDeviceService, service.NewSysSettingService)

var sysRepoSet = wire.NewSet(repository.NewSysDeviceRepository, repository.NewSysSettingRepository, repository.NewSysVersionRepository)

// user相关集合
var userHandlerSet = wire.NewSet(handler.NewLoginHandler, handler.NewUserHandler)

var userSrvSet = wire.NewSet(service.NewUserService)

var userRepoSet = wire.NewSet(repository.NewUserRepository)

// 集合组
var handlerGroup = wire.NewSet(handler.NewHandler, handler.NewDemoApi, sysHandlerSet,
	userHandlerSet,
)

var srvGroup = wire.NewSet(conf.NewS3Conf, s3.NewS3, mailx.NewSender, service.NewService, service.NewImageService, sysSrvSet,
	userSrvSet,
)

var repoGroup = wire.NewSet(repo.NewWDB, repo.NewRDB, repo.NewRedis, repo.NewMongoDB, repo.NewRepository, sysRepoSet,
	userRepoSet,
)
